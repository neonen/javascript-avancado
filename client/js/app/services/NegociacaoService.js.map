{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","valor","quantidade","catch","console","log","erro","all","obterNegociacoesSemana","obterNegociacoesSemanaAnterior","obterNegociacoesSemanaRetrasada","reduce","arrayAchatado","array","concat","negociacao","ConnectionFactory","getConnection","NegociacaoDao","conexao","dao","adiciona","Error","listaTodos","connection","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negocicao","negociacaoExistentes"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\nimport {Negociacao} from '../models/Negociacao';\nimport {ConnectionFactory} from './ConnectionFactory';\n\nexport class NegociacaoService{\n\n    constructor(){\n        this._http = new HttpService();\n    }\n\n    obterNegociacoesSemana(){\n\n        return new Promise((resolve,reject) => {\n           \n            this._http\n                .get('negociacoes/semana')\n                .then(negociacoes => {\n                    \n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.valor,objeto.quantidade)))\n                }).catch( erro => {\n                    console.log(erro);\n                    reject('Não foi possivel resceber as negociações da semana.')\n                });\n        \n        });\n    }\n    obterNegociacoesSemanaRetrasada(){\n\n        return new Promise((resolve,reject) => {\n            \n            this._http\n                .get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    \n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.valor,objeto.quantidade)))\n                }).catch( erro => {\n                    console.log(erro);\n                    reject('Não foi possivel resceber as negociações da semana retrasada.')\n                });\n        });\n        \n    }\n\n    obterNegociacoesSemanaAnterior(){\n\n        return new Promise((resolve,reject) => {\n            \n            this._http\n                .get('negociacoes/anterior')\n                .then(negociacoes => {\n                    \n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.valor,objeto.quantidade)))\n                }).catch( erro => {\n                    console.log(erro);\n                    reject('Não foi possivel resceber as negociações da semana anterior.')\n                });\n        });\n        \n    }\n\n    obterNegociacoes(){\n        return Promise.all([\n            this.obterNegociacoesSemana(),\n            this.obterNegociacoesSemanaAnterior(),\n            this.obterNegociacoesSemanaRetrasada()]\n        ).then(negociacoes => negociacoes.reduce((arrayAchatado, array) => arrayAchatado.concat(array) , []));\n    }\n\n    cadastra(negociacao){\n        return ConnectionFactory\n        .getConnection()\n        .then(conexao => new NegociacaoDao(conexao))\n        .then(dao => dao.adiciona(negociacao))\n        .then(() =>  \"Negociação adicionada com suscesso!\")\n        .catch(erro => {\n            throw new Error(\"Não foi possível adicionar a negociação\")\n        });\n    }\n\n    lista(){\n        return ConnectionFactory\n            .getConnection()\n            .then(conexao => new NegociacaoDao(conexao))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                return \"Erro ao listar as Negociações\";\n            });\n    }\n\n    apaga(){\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => \"Negociações apagadas\")\n            .catch(erro => {\n                console.log(erro);\n                return \"Erro ao apagar as Negociações\";\n            });\n    }\n\n    importa(listaAtual){\n        return this.obterNegociacoes()\n                .then(negociacoes => \n                    negociacoes.filter(negocicao => \n                    !listaAtual.some(negociacaoExistentes =>\n                        JSON.stringify(negocicao) == JSON.stringify(negociacaoExistentes))))\n                .catch(erro => {\n                    throw new Error(\"Não foi possível importa a negociação\");\n                });\n    }\n}"]}