{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","dbName","vesion","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","conexao","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoincrement"],"mappings":";;;;;;;;;;AAAA,IAAMA,SAAS,CAAC,cAAD,CAAf;AACA,IAAMC,SAAS,YAAf;AACA,IAAMC,SAAS,CAAf;;AAEA,IAAIC,aAAa,IAAjB;AACA,IAAIC,QAAQ,IAAZ;;IAEaC,iB,WAAAA,iB;AAET,iCAAc;AAAA;;AACV,cAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACH;;;;wCACsB;AACnB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,MAAtB,EAA8BC,MAA9B,CAAlB;;AAEAQ,4BAAYI,eAAZ,GAA8B,aAAK;AAC/BT,sCAAkBU,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACH,iBAFD;AAGAR,4BAAYS,SAAZ,GAAwB,aAAK;AACzB,wBAAG,CAAChB,UAAJ,EAAe;AACXA,qCAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,gCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,mCAAWC,KAAX,GAAmB,YAAW;AAAC,kCAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AAAmD,yBAAlF;AACH;AACDE,4BAAQL,UAAR;AACH,iBAPD;AAQAO,4BAAYW,OAAZ,GAAsB,aAAK;AACvBC,4BAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;;AAEAf,2BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,iBAJD;AAKH,aAnBM,CAAP;AAoBH;;;qCAEmBC,O,EAAS;AACzB1B,mBAAO2B,OAAP,CAAe,iBAAS;AACpB,oBAAID,QAAQE,gBAAR,CAAyBC,QAAzB,CAAkCC,KAAlC,CAAJ,EACIJ,QAAQK,iBAAR,CAA0BD,KAA1B;AACJJ,wBAAQM,iBAAR,CAA0BF,KAA1B,EAAiC,EAAEG,eAAe,IAAjB,EAAjC;AACH,aAJD;AAKH;;;0CAEuB;AACpB,gBAAG9B,UAAH,EAAc;AACVC;AACAD,6BAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacaoes'];\nconst dbName = 'aluraframe';\nconst vesion = 4;\n\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n        throw new Error('Não é possivel criar Intancia');\n    }\n    static getConnection() {\n        return new Promise((resolve, reject) => {\n            let openRequest = window.indexedDB.open(dbName, vesion);\n\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStore(e.target.result);\n            };\n            openRequest.onsuccess = e => {\n                if(!connection){ \n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function() {throw new Error('Você não pode fechar a conexão');};\n                }\n                resolve(connection);\n            }\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n\n                reject(e.target.error.name);\n            }\n        });\n    }\n\n    static _createStore(conexao) {\n        stores.forEach(store => {\n            if (conexao.objectStoreNames.contains(store))\n                conexao.deleteObjectStore(store);\n            conexao.createObjectStore(store, { autoincrement: true });\n        });\n    }\n\n    static closeConnection(){\n        if(connection){\n            close();\n            connection = null;\n        }\n    }\n}"]}